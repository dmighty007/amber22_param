#!/bin/csh -f
#TEST-PROGRAM sander
#TEST-DESCRIP TO_BE_DEtermined
#TEST-PURPOSE regression, basic
#TEST-STATE   undocumented

../../check_GAUSSIAN.x
if( $status > 0) then
  exit(0)
endif

set sander = "${AMBERHOME}/bin/sander"
if( $?TESTsander ) then
    set sander = $TESTsander
endif

if( ! $?DO_PARALLEL ) then
    setenv DO_PARALLEL " "
else
    echo "This test not set up for parallel"
    echo "Parallelism handled within GAUSSIAN"
    exit 0
endif

# check how many CPU cores Gaussian should use
if ( $?GAU_NCPUS) then
    if ( $GAU_NCPUS > 1 ) then
        echo "Gaussian will run on $GAU_NCPUS CPU cores"
    endif
else
    set GAU_NCPUS = 1
    echo "GAUSSIAN will run on 1 CPU core"
    echo "(environment variable GAU_NCPUS not set)"
endif

cat > mdin <<EOF
Geometry optimization with Gaussian, 2 steps steepest descent
 &cntrl
  imin=1,     ! do a minimization
  maxcyc=2,   ! max 2 minimization steps
  ncyc=2 ,    ! switch to conjugate gradient after 2 steps of steepest descent
  drms=0.5,   ! RMS gradient convergence criterium 0.5 (kcal/mol)/A = 2.d-3 au
  cut=9999.0, ! non-bonded cutoff (irrelevant for now with pure QM)
  ntb=0,      ! no periodic boundary conditions
  ntpr=1,     ! print every minimization step
  ntwx=1,     ! write coordinates each step
  ntwr=2,     ! write restart file at last step
  ioutfm = 1, ! NetCDF MDCRD.
  ifqnt=1     ! do QM/MM
 /
 &qmmm
  qmmask    ='@*',
  qmcharge  = 0,
  qm_theory ='EXTERN',
  verbosity = 0,
 /
 &gau
  basis = 'STO-3G',
  method = 'BLYP',
  num_threads=$GAU_NCPUS
 /
EOF

set output = h2o.blyp_sto-3g.out

touch dummy
$DO_PARALLEL $sander -O -p h2o.prmtop -c h2o.inpcrd -o $output < dummy || goto error
grep -v 'num_threads' $output > tmp
mv tmp $output
../../dacdif -a 0.002  $output.save $output

/bin/rm -f mdin mdinfo mdcrd dummy restrt old.gau_job* gau_job.*
exit(0)

error:
echo "  ${0}:  Program error"
exit(1)









