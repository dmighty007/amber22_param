#!/bin/csh -f
#TEST-PROGRAM sander
#TEST-DESCRIP TO_BE_DEtermined
#TEST-PURPOSE regression, basic
#TEST-STATE   undocumented

../../check_Orca.x
if( $status > 0) then
  exit(0)
endif

set sander = "${AMBERHOME}/bin/sander.MPI"
if( $?TESTsander ) then
    set sander = $TESTsander
endif

if( ! $?DO_PARALLEL ) then
    echo "This test (REMD) can only run in parallel"
    echo "Parallelism within Orca will be on top. Exiting."
    exit 0
else
    set numprocs = `$DO_PARALLEL echo "Testing number of processors" | wc -l`
    if ( "$numprocs" != 2 ) then
	echo "Error: This test needs to run in parallel on 2 processors. Exiting."
	exit 0
    endif
endif

echo "Parallelism treated within Orca"

cat > rem1.mdin <<EOF
!Orca REMD TEST

&cntrl
  irest  = 0,           !restart
  ntx    = 1,           !coordinates and velocities are read in
  cut    = 9999.9       !non-bonded interactions cutoff
  dt     = 0.0005,      !0.5fs time step
  ntb    = 0,           !no periodicity and PME off!
  ntt    = 1,
  nchain = 4,
  ntpr   = 1,           !print details to log every 10 steps (every 5fs)
  ntwx   = 1,           !write coordinates to mdcrd every 10 steps (every 5fs)
  ntwr   = 1,           !write restart file at last step
  nstlim = 1,           !run 1 step between exchanges (.5 fs at dt=0.5fs)
  numexchg = 3,         !exchange 3 times total (1.5 fs total)
  temp0  = 300.0,
  nscm   = 0,           !No removal of COM motion,
  ioutfm = 0,           !Formatted ASCII trajectory file
  ifqnt  = 1,
 /
 &qmmm
  qmmask    = '@*',
  qmcharge  = 0,
  qm_theory = 'EXTERN',
  verbosity = 0,
 /
 &orc
  basis  = 'sto-3g',
  method = 'rhf',
 /
EOF
cat > rem2.mdin <<EOF
!Orca REMD TEST

&cntrl
  irest  = 0,           !restart
  ntx    = 1,           !coordinates and velocities are read in
  cut    = 9999.9       !non-bonded interactions cutoff
  dt     = 0.0005,      !0.5fs time step
  ntb    = 0,           !no periodicity and PME off!
  ntt    = 1,
  nchain = 4,
  ntpr   = 1,           !print details to log every 10 steps (every 5fs)
  ntwx   = 1,           !write coordinates to mdcrd every 10 steps (every 5fs)
  ntwr   = 1,           !write restart file at last step
  nstlim = 1,           !run 1 step between exchanges (.5 fs at dt=0.5fs)
  numexchg = 3,         !exchange 3 times total (1.5 fs total)
  temp0  = 350.0,
  nscm   = 0,           !No removal of COM motion,
  ioutfm = 0,           !Formatted ASCII trajectory file
  ifqnt  = 1,
 /
 &qmmm
  qmmask    = '@*',
  qmcharge  = 0,
  qm_theory = 'EXTERN',
  verbosity = 0,
 /
 &orc
  method ='rhf'
  basis  ='sto-3g'
 /
EOF
set log=rem.log
set output=rem.mdout
/bin/rm -f $log $output.00? gf_remd

cat > gf_remd <<EOF
-O -rem 1 -remlog $log -i ./rem1.mdin -p h2o.prmtop -c ./h2o.inpcrd -o ./$output.000 -inf rem.mdinfo.000 -r ./rem.restrt.000 -x rem.mdcrd.000
-O -rem 1 -remlog $log -i ./rem2.mdin -p h2o.prmtop -c ./h2o.inpcrd -o ./$output.001 -inf rem.mdinfo.001 -r ./rem.restrt.001 -x rem.mdcrd.001
EOF

$DO_PARALLEL $sander -O -ng 2 -groupfile gf_remd #< /dev/null || error
../../dacdif -t 1 rem.mdout.000.save rem.mdout.000
../../dacdif -t 1 rem.mdout.001.save rem.mdout.001
../../dacdif  rem.mdcrd.000.save rem.mdcrd.000
../../dacdif  rem.mdcrd.001.save rem.mdcrd.001
/bin/rm -r -f 000 001
/bin/rm -f gf_remd rem.mdinfo.??? rem.restrt.??? *mdin rem.log rem.type *dip orc_job* old.orc_job* inpfile*
exit(0)

error:
echo "  ${0}:  Program error"
exit(1)









