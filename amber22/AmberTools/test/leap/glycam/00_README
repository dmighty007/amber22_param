README for the GLYCAM tleap tests
    20120319 BLFoley

************************************
Usage overview
************************************

Each force field directory contains a file "Run.glycam".

Typical GLYCAM tests should be run from that directory with:

	./Run.glycam

If desired, the directory can be freshened with:

	./Run.glycam clean

Users wishing to run for learning or failure evaluation should use:

	./Run.glycam evaluate

		-- this variant will not remove intermediate files and
			will not attempt to write information out to
			the central test-results directories.  
		-- this variant should also render the script directories
			self-contained: that is, they may be copied elsewhere
			for testing and evaluation purposes.

To generate new comparison standards (the *.save files):

	./Run.glycam generate

************************************
Testing overview
************************************

Each subdirectory in this directory represents a parameter set.
As of the time of this writing, they are

	Carbohydrate-only, optionally with ions and water:

	06EPb 		The GLYCAM parameter set with extra points (lone pairs)
	06j 		The standard GLYCAM parameterset

	Combinations for building glycoproteins:

	06j-10		Using ff10 or ff13
	06j-12SB	Using ff12SB or ff13SB


Testing workflow:

Tests will take place in each of the parameter set directories.
Each test involves the following:

1.  All files with name *.leapin will be run as input to tleap.  Their output
	will go into the directory containing the .leapin file.

	The prmtop and inpcrd files should be saved with suffixes .parm7 and
		.rst7, respectively, and their names should match the prefix
		to the .leapin file.  If a leap log is written, name it with
		the suffix .leaplog.

	Each output file should be unique.  That is, subsequent runs of tleap
		should not overwrite or append to previously generated files
		(unless generated by a previous call to Run.glycam).
	
2.  Relevant comparison output will have been previously generated and saved 
	in files with names *.save.

3.  The dacdif scrip will be run on each .save file and its un-suffixed 
	counterpart to test tleap function.

4.  After successful tests, all files generated during the test are removed.

5.  If a test is not successful, a small number of files and directories will be left so
    that the user might determine the cause.

************************************
The leap input files
************************************

Each of the tests herein builds a number of structures at once.  To save on testing time,
the various structures are built into a single prmtop/inpcrd set.  They are translated away
from each other to facilitate visualization.  The comments in the leap input files should
be reasonably explanatory to someone familiar with leap.

Note that in many cases the structures built contain clashes.  These are meant only as tests
of the software in their current state.  However, users can alter various torsions to produce
usable files.  See the "Glycoprotein.leapin" in 06j_10 and 06j_12SB for examples of torsion 
setting.
