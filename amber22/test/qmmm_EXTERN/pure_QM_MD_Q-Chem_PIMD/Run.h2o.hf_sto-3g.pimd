#!/bin/csh -f
#TEST-PROGRAM sander
#TEST-DESCRIP TO_BE_DEtermined
#TEST-PURPOSE regression, basic
#TEST-STATE   undocumented

../../check_Q-Chem.x
if( $status > 0) then
  exit(0)
endif

set sander = "${AMBERHOME}/bin/sander.MPI"
if( $?TESTsander ) then
    set sander = $TESTsander
endif

if( ! $?DO_PARALLEL ) then
    echo "This test (PIMD) can only run in parallel"
    echo "Parallelism within Q-Chem will be on top. Exiting."
    exit 0
else
    set numprocs = `$DO_PARALLEL echo "Testing number of processors" | wc -l`
    if ( "$numprocs" != 2 ) then
	echo "Error: This test needs to run in parallel on 2 processors. Exiting."
	exit 0
    endif
endif

# check on how many CPU core Q-Chem shall be running
if ( $?QC_NCPUS) then
    if ( $QC_NCPUS > 1 ) then
        echo "Q-Chem will run on $QC_NCPUS CPU cores"
    endif
else
    set QC_NCPUS = 1
    echo "Q-Chem will run on 1 CPU core"
    echo "(environment variable QC_NCPUS not set)"
endif

cat > mdin <<EOF
Q-Chem PIMD TEST

&cntrl
  ipimd  = 2
  irest  = 0,           !restart
  ntx    = 1,           !coordinates and velocities are read in
  cut    = 9999.9       !non-bonded interactions cutoff
  dt     = 0.0005,      !0.5fs time step
  ntb    = 0,           !no periodicity and PME off!
  ntt    = 4,           !turn off thermostat
  nchain = 4,
  ntpr   = 1,           !print details to log every 10 steps (every 5fs)
  ntwx   = 1,           !write coordinates to mdcrd every 10 steps (every 5fs)
  ntwr   = 1,           !write restart file at last step
  nstlim = 2,           !run for 2 steps (1 fs at dt=0.5fs)
  nscm   = 0,           !No removal of COM motion,
  ioutfm = 0,           !Formatted ASCII trajectory file
  ifqnt  = 1,
 /
 &qmmm
  qmmask    = '@*',
  qmcharge  = 0,
  qm_theory = 'EXTERN',
  verbosity = 0,
 /
 &qc
  method = 'hf',
  basis  = 'sto-3g',
  num_threads = $QC_NCPUS,
 /
EOF

set output = pimd.mdout

cat > gf_pimd <<EOF
-O -p h2o.prmtop -c bead1.inpcrd -o bead1.mdout -r bead1.restrt -x bead1.mdcrd -inf bead1.mdinfo -pimdout $output
-O -p h2o.prmtop -c bead2.inpcrd -o bead2.mdout -r bead2.restrt -x bead2.mdcrd -inf bead2.mdinfo -pimdout $output
EOF


touch dummy
$DO_PARALLEL $sander -ng 2 -groupfile gf_pimd < dummy > qc_job_env.dat || goto error
../../dacdif  $output.save $output
../../dacdif  bead1.mdcrd.save bead1.mdcrd
../../dacdif  bead2.mdcrd.save bead2.mdcrd
# remove info about number of threads from output as this may vary
grep -v 'num_threads' bead1.mdout > tmp
mv tmp bead1.mdout
../../dacdif  bead1.mdout.save bead1.mdout
grep -v 'num_threads' bead2.mdout > tmp
mv tmp bead2.mdout
../../dacdif  bead2.mdout.save bead2.mdout

/bin/rm -f mdin gf_pimd bead*.mdinfo dummy bead*.restrt rm qc_job* old.qc_job* old.efield.dat efield.dat TMP qc_job_env.dat
/bin/rm -r -f 001 002
exit(0)

error:
echo "  ${0}:  Program error"
exit(1)









