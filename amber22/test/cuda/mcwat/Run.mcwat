#!/bin/csh -f
#TEST-PROGRAM pmemd.cuda
#TEST-DESCRIP TO_BE_DEtermined
#TEST-PURPOSE regression, basic
#TEST-STATE   undocumented

#$1 = PREC_MODEL
#$2 = NETCDF

if( ! $?DO_PARALLEL ) then
  setenv DO_PARALLEL " "
  if( $?TESTsander ) then
      set sander = $TESTsander
  else
      set sander = ${AMBERHOME}/bin/pmemd.cuda_$1
  endif
else
  if( $?TESTsander ) then
      set sander = $TESTsander
  else
      set sander = ${AMBERHOME}/bin/pmemd.cuda_$1.MPI
  endif
endif


cat > mdin <<EOF
Initial equilibration of fullerene
 &cntrl
  imin=0,
  ntx=5,
  irest=1,
  nstlim=10,
  dt=0.00001,
  ntc=2,
  ntf=2,
  ntpr=1,
  ntwx=0,
  ntwr=1,
  cut=12.0,
  ntb=1,
  ntp=0,
  pres0=0.0,
  ntt=3,
  temp0=500.0,
  gamma_ln=5.0,
  nmropt=0,
  ioutfm=1,
  ntxo=2,
  iwrap=1,
  ig=99999,
  mcwat=1,
  mcint=10,
  mcrescyc=10,
  mcverbosity=1,
  mcresstr='WAT ',
  mcligshift=10.0,
  mcwatmask=":1",
  mcresstr='WAT ',
  irandom=1,
 /
EOF

set output = mdout.mcwat

set output_save = $output.GPU_$1

touch dummy
$DO_PARALLEL $sander -O -i mdin -c eq1.x -o $output <dummy || goto error
#Use different dacdif tolerances based on precision model.
if ( "$1" == "DPFP" ) then
  #7 sig figs
  ../../dacdif -f -r 1.0e-7 $output_save $output
else
  if ( $?DO_PARALLEL ) then
    #Use slightly less precision for parallel runs.
    #3 sig figs
    #Special case for 4096wat since it has one value with
    #a big relative error - so you get a 1 line failure.
    ../../dacdif -f -r 1.0e-2 $output_save $output
  else 
    #5 sig figs
    ../../dacdif -f -r 1.0e-5 $output_save $output
  endif
endif

/bin/rm -f mdin logfile mdinfo dummy mdcrd restrt
exit(0)

error:
echo "  ${0}:  Program error"
exit(1)
