#!/bin/csh -f
#TEST-PROGRAM pmemd
#TEST-DESCRIP TO_BE_DEtermined
#TEST-PURPOSE regression, advanced
#TEST-STATE   undocumented

# Makefile passes in value of EMIL
if ( "$1" == "" ) then
  echo "EMIL was not configured at build time (or flag was not passed in):"
  echo "skipping test."
  echo 'Run $AMBERHOME/configure for more information.'
  exit(0)
endif

if( ! $?DO_PARALLEL ) then
	echo "DO_PARALLEL not set... testing emil in serial." 
        setenv DO_PARALLEL " "
        if( ! $?TESTsander ) set TESTsander = "${AMBERHOME}/bin/pmemd"
else
	echo "DO_PARALLEL is set: $DO_PARALLEL"
	if( ! $?TESTsander ) set TESTsander = "${AMBERHOME}/bin/pmemd.MPI"
endif

echo "#Run        CPU(s)  Ref.CPU(s) Wall(s) Ref.Wall(s)" > test_timings.dat

#foreach lambda (0.1 0.5 0.9)
foreach lambda (0.5)

##generate input files for emil run
cat > mdin <<EOF
  Input file for emil run, emil-specific params are in emilParameters.in 
 &cntrl
  iwrap  = 0,
  ntx = 1, irest = 0, 
  ntb = 1, ntp = 0,
  cut = 12, 
  ntc = 1, ntf = 1,
  tempi = 300.0, temp0 = 300.0,
  ntt = 3, gamma_ln=1.0,
  nstlim = 10000,
  dt = 0.001,
  ntpr = 1, ntwx = 10, ntwr = 5000,
  ntave = 100000,
  ig = 1902,
  ntr    = 0, vlimit = 0,
  emil_do_calc = 1,
  logdvdl = 1,
  emil_sc = 1, icfe = 1, ifsc = 1, clambda = $lambda
 /
 &emil_cntrl
  emil_paramfile = "emilParameters.in", 
  emil_logfile   = "emil.log", 
  emil_model_infile  = "wellsIn_swap4.dat",
  emil_model_outfile = "wells.dat",
 /

EOF


cat > emilParameters.in <<EOF

##well description
EpsilonTrap      5.0
epsilonWell      5.0
rWell            1.0 
   
rTrap            5.0    
rEqTrap          1.0    
wingForce        1.111

##print frequency (and averaging window) of gen force
printEvery       1

##define molecules in each phase
solidRes         DC,DG,DA,DT,DA5,DT5,DA3,DT3,DG5,DG3,DC5,DC3
assignedLiquidRes        Na+
assignedLiquidRes        Cl-
assignedLiquidRes        WAT

assignmentMethod 1

##emil has its own RNG 
Seed             1902

##set MC move frequencies -- chosen for the sake of a good test,
##more than for an effective calculation!
swapTriesPerChain    0 
relocTriesPerChain   0 

lambda               $lambda

EOF


set output = mdout.emil.$lambda
($DO_PARALLEL $TESTsander -O -i mdin \
                          -c gc12_Z_1.0MNaCl.rst \
                          -p gc12_Z_1.0MNaCl.top \
                          -o $output >emil.stdout.dummy ) \
                   >& emil.stderr.$lambda || goto error



mv emil.log emil.log.$lambda


##uncomment these lines to regenerate the reference sets.
#cp emil.log.$lambda    emil.log.$lambda.save
#cp $output            $output.save

###save the timings just for a quick performance check
set t1 = `grep "Total CPU" $output       | awk '{for(i=2;i<NF;i++){if($i=="time:"){print $(i+1)}}}'`
set t2 = `grep "Total CPU" $output.save  | awk '{for(i=2;i<NF;i++){if($i=="time:"){print $(i+1)}}}'`
set w1 = `grep "Total wall" $output      | awk '{for(i=2;i<NF;i++){if($i=="time:"){print $(i+1)}}}'`
set w2 = `grep "Total wall" $output.save | awk '{for(i=2;i<NF;i++){if($i=="time:"){print $(i+1)}}}'`

echo $output $t1 $t2 $w1 $w2>> test_timings.dat

##diff the test and reference
../../dacdif -t 2 -k  $output.save              $output 
../../dacdif -t 2 -k  emil.log.$lambda.save     emil.log.$lambda


end ##loop over lambda

/bin/rm -f *dummy
/bin/rm -f mdin mdinfo
exit(0)

error:
echo "  ${0}:  Program error"
exit(1)










